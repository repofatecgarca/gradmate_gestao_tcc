<!DOCTYPE html>
<html lang="pt">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Index - GradMate</title>
    <link rel="icon" type="image/x-icon" href="/img/favicon.png">
    <link rel="stylesheet" href="/css/tabelasetc.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.5/dist/sweetalert2.all.min.js"></script>
</head>

<body>
<%- include("border") -%>
<main id="content" class="fade-in">
    <div id="top-part">
        <input type="text" id="top-part-search" placeholder="Buscar por nome"/>
        <button id="top-part-addbtn">Adicionar</button>
    </div>
    <div class="list" data-cursos="<%= JSON.stringify(cursos) %>">
        <% if (!cursos || cursos.length === 0) { %>
            <p>Nenhum curso encontrado!</p>
        <% } %>
    </div>
    <% if (cursos && cursos.length > 0) { %>
        <div class="footer">
            <button class="page-button" onclick="navigate(-1)">ü†à</button>
            <span>P√°gina <span id="currentPage"></span> de <span id="totalPages"></span></span>
            <button class="page-button" onclick="navigate(1)">ü†ä</button>
        </div>
    <% } %>
</main>
</body>

<script>
    let cursos = JSON.parse(document.querySelector(".list").dataset.cursos);
    const itemsPerPage = 15;  // Defina quantos itens por p√°gina
    let currentPage = 1;

    const currentPageElement = document.getElementById("currentPage");
    const totalPagesElement = document.getElementById("totalPages");
    const footer = document.querySelector(".footer");
    const searchInput = document.getElementById("top-part-search");

    function renderPage(page, filteredCursos = cursos) {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const pageItems = filteredCursos.slice(startIndex, endIndex);
        if (pageItems.length === 0) {
            return;
        }

        const listContainer = document.querySelector(".list");
        listContainer.innerHTML = "";

        pageItems.forEach(curso => {
            const listItem = document.createElement("div");
            listItem.classList.add("list-item");
            listItem.innerHTML += "<span>" + curso.id + "</span>";
            listItem.innerHTML += "<span>" + curso.nome + "</span>";
            listItem.innerHTML += "<span>" + "</span>";
            listItem.innerHTML += `<button class="edit-bttn" onclick="abrirFormulario(${curso.id})">üìù</button>`;
            listItem.innerHTML += `<button class="rmv-bttn" onclick="rm(${curso.id}, '${curso.nome}')">‚ùå</button>`;
            listContainer.appendChild(listItem);
        });

        currentPageElement.textContent = currentPage;
        totalPagesElement.textContent = Math.ceil(filteredCursos.length / itemsPerPage);

        // Mostrar ou ocultar a navega√ß√£o de p√°gina com base no n√∫mero de cursos
        if (filteredCursos.length <= itemsPerPage) {
            footer.style.display = "none";
        } else {
            footer.style.display = "block";
        }
    }

    function navigate(direction) {
        const totalPages = Math.ceil(cursos.length / itemsPerPage);
        currentPage += direction;

        if (currentPage < 1) {
            currentPage = 1;
        } else if (currentPage > totalPages) {
            currentPage = totalPages;
        }

        renderPage(currentPage);
    }

    function filterCursos() {
        const query = searchInput.value.toLowerCase();
        const filteredCursos = cursos.filter(curso =>
            curso.nome.toLowerCase().includes(query)
        );
        currentPage = 1; // Resetar para primeira p√°gina ao buscar
        renderPage(currentPage, filteredCursos);
    }

    document.addEventListener("DOMContentLoaded", () => {
        renderPage(currentPage);
    });

    searchInput.addEventListener("input", filterCursos);

    function rm(id, nome) {
        var remove = confirm(`Voc√™ tem certeza que deseja remover o curso ${nome}?`);
        if (remove) {
            location.href = "/cursos/remove?id=" + id;
        }
    }

    document.getElementById("top-part-addbtn").addEventListener("click", () => abrirFormulario());

    async function abrirFormulario(id = null) {

        try {
            let curso = { nome: "" };

            if (id) {
                const cursoResponse = await fetch(`/cursos/curso?id=${id}`);
                if (cursoResponse.ok) {
                    curso = await cursoResponse.json();
                    curso = curso.curso[0];
                }
            }

            Swal.fire({
                heightAuto: false,
                title: id ? "Editar curso" : "Adicionar novo curso",
                html: `
                    <form id="curso_form">
                        <label for="nome">Nome</label>
                        <input type="text" id="nome" name="nome" value="${curso.nome}" class="swal2-input" required>
                    </form>
                `,
                showCancelButton: true,
                confirmButtonText: id ? "Atualizar" : "Adicionar",
                preConfirm: () => {
                    const nome = document.getElementById('nome').value;
                    if (!nome) {
                        Swal.showValidationMessage("O nome do curso √© obrigat√≥rio!");
                        return false;
                    }

                    return fetch(`/cursos${id ? `?id=${id}` : ''}`, {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({ id: id, nome: nome })
                    }).then(response => {
                        if (!response.ok) throw new Error(response.statusText);
                        return response;
                    }).catch(error => Swal.showValidationMessage(`Erro: ${error}`));
                }
            }).then(result => {
                if (result.isConfirmed) {
                    Swal.fire('Sucesso!', 'O curso foi salvo com sucesso!', 'success');
                    setTimeout(() => window.location.reload(), 2000);
                }
            });
        } catch (error) {
            console.log(error)
            Swal.fire('Erro', 'Erro ao carregar dados. Tente novamente.', 'error');
        }
    }
</script>

</html>
