<!DOCTYPE html>
<html lang="pt">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Index - GradMate</title>
    <link rel="icon" type="image/x-icon" href="/img/favicon.png">
    <link rel="stylesheet" href="/css/tabelasetc.css">

    <script src="
https://cdn.jsdelivr.net/npm/sweetalert2@11.14.5/dist/sweetalert2.all.min.js
"></script>
</head>

<body>
<%- include("border") -%>
<main id="content" class="fade-in">
    <div id="top-part">
        <input type="text" id="top-part-search" placeholder="Buscar por nome do projeto"/>
        <button id="top-part-addbtn">Adicionar</button>
    </div>
    <div class="list" data-projetos="<%= JSON.stringify(projetos) %>">
    </div>
    <% if (projetos && projetos.length > 0) { %>
        <div class="footer">
            <button class="page-button" onclick="navigate(-1)">ü†à</button>
            <span>P√°gina <span id="currentPage"></span> de <span id="totalPages"></span></span>
            <button class="page-button" onclick="navigate(1)">ü†ä</button>
        </div>
    <% } %>
</main>
</body>

<script>
    let projetos = JSON.parse(document.querySelector(".list").dataset.projetos);
    const itemsPerPage = 15;
    let currentPage = 1;

    const currentPageElement = document.getElementById("currentPage");
    const totalPagesElement = document.getElementById("totalPages");
    const footer = document.querySelector(".footer");
    const searchInput = document.getElementById("top-part-search");

    function renderPage(page, filteredProjetos = projetos) {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const pageItems = filteredProjetos.slice(startIndex, endIndex);
        if (pageItems.length === 0) {
            return;
        }

        const listContainer = document.querySelector(".list");
        listContainer.innerHTML = "";

        pageItems.forEach(proj => {
            const listItem = document.createElement("div");
            listItem.classList.add("list-item");
            listItem.innerHTML += "<span>" + proj.id + "</span>";
            listItem.innerHTML += "<span>" + proj.nome + "</span>";
            listItem.innerHTML += "<span>" + proj.curso + "</span>";
            listItem.innerHTML += "<button class=\"edit-bttn\" id=\"edit-btn-" + proj.id + "\">üìù</button>";
            listItem.innerHTML += `<button class="rmv-bttn" onclick="rm(${proj.id}, '${proj.nome}')">‚ùå</button>`;

            listContainer.appendChild(listItem);
        });

        currentPageElement.textContent = currentPage;
        totalPagesElement.textContent = Math.ceil(filteredProjetos.length / itemsPerPage);

        // Mostrar ou ocultar a navega√ß√£o de p√°gina com base no n√∫mero de professores
        if (filteredProjetos.length <= itemsPerPage) {
            footer.style.display = "none";
        } else {
            footer.style.display = "block";
        }

        document.querySelectorAll(".edit-bttn").forEach(button => {
            button.addEventListener("click", (event) => {
                event.preventDefault();
                const id = event.currentTarget.id.split("-")[2];
                abrirFormulario(id);
            });
        });
    }

    function navigate(direction) {
        const totalPages = Math.ceil(projetos.length / itemsPerPage);
        currentPage += direction;

        if (currentPage < 1) {
            currentPage = 1;
        } else if (currentPage > totalPages) {
            currentPage = totalPages;
        }

        renderPage(currentPage);
    }

    document.addEventListener("DOMContentLoaded", () => {
        renderPage(currentPage);
    });

    function rm(id, nome) {
        var remove = confirm(`Voc√™ tem certeza que deseja remover o projeto ${nome}?`);
        if (remove) {
            location.href = "/projetos/remove?id=" + id;
        }
    }

    function filterProjetos() {
        const query = searchInput.value.toLowerCase();
        const filteredProjetos = professores.filter(proj => proj.nome.toLowerCase().includes(query));
        currentPage = 1;
        renderPage(currentPage, filteredProjetos);
    }

    searchInput.addEventListener("input", filterProjetos);

    document.getElementById("top-part-addbtn").addEventListener("click", () => abrirFormulario());

    async function abrirFormulario(id = null) {
        Swal.fire({
            heightAuto: false,
            title: "Carregando dados...",
            didOpen: () => {
                Swal.showLoading();
            }
        });

        try {
            const [cursosResponse, professoresResponse] = await Promise.all([
                fetch("/cursos/data"),
                fetch("/professores/data")
            ]);

            const cursos = await cursosResponse.json();
            const professores = await professoresResponse.json();
            let projeto = {nome: '', descricao: '', id_curso: '', id_orientador: ''};

            if (id) {
                const projetoResponse = await fetch(`/projeto?id=${id}`);
                if (projetoResponse.ok) {
                    projeto = await projetoResponse.json();
                    projeto = projeto.projeto[0]
                } else {
                    console.warn("Projeto n√£o encontrado. Verifique o ID.");
                }
            }

            Swal.close();
            console.log(projeto)
            Swal.fire({
                heightAuto: false,
                title: id ? "Editar projeto" : "Inserir novo projeto",
                html: `
                    <form id="project_form">
                        <label for="nome">Nome</label>
                        <input type="text" id="nome" name="nome" value="${projeto.nome}" minlength="5" maxlength="200" class="swal2-input" required>
                        <br><br>
                        <label for="descricao">Descri√ß√£o</label>
                        <input type="text" id="descricao" name="descricao" value="${projeto.descricao}" minlength="5" maxlength="1000" class="swal2-input" required>
                        <br><br>
                        <label for="curso">Curso</label>
                        <br>
                        <select id="curso" name="curso" class="swal2-input">
                            ${cursos.map(curso => `<option value="${curso.id}" ${projeto.id_curso === curso.id ? 'selected' : ''}>${curso.nome}</option>`).join('')}
                        </select>
                        <br><br>
                        <label for="orientador">Professor orientador</label>
                        <br>
                        <select id="orientador" name="orientador" class="swal2-input">
                            <option value="" disabled ${!projeto.orientador ? 'selected' : ''}></option>
                            ${professores.map(professor => `<option value="${professor.id}" ${projeto.id_orientador === professor.id ? 'selected' : ''}>${professor.nome}</option>`).join('')}
                        </select>
                        <br><br>
                        <input type="submit" hidden>
                    </form>
                `,
                showCancelButton: true,
                confirmButtonText: id ? "Atualizar" : "Inserir",
                preConfirm: () => {
                    const nome = document.getElementById('nome').value;
                    if (!nome) {
                        Swal.showValidationMessage("O nome do projeto √© obrigat√≥rio!");
                        return false;
                    }

                    const descricao = document.getElementById('descricao').value;
                    const curso = document.getElementById('curso').value;
                    const orientador = document.getElementById('orientador').value;

                    return fetch(`/projetos${id ? `/${id}` : ''}`, {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({
                            id: id,
                            nome: nome,
                            descricao: descricao,
                            curso: curso,
                            orientador: orientador
                        }),
                    }).then(response => {
                        if (!response.ok) throw new Error(response.statusText);
                        return response;
                    }).catch(error => {
                        Swal.showValidationMessage(`Erro: ${error}`);
                    });
                }
            }).then(result => {
                if (result.isConfirmed) {
                    Swal.fire('Sucesso!', 'O projeto foi salvo com sucesso!', 'success');
                    setTimeout(() => window.location.reload(), 2000);
                }
            });
        } catch (error) {
            Swal.fire('Erro', 'Erro ao carregar dados. Tente novamente.', 'error');
        }
    }
</script>

</html>
